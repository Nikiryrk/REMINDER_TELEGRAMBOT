import telebot
import sqlite3
from telebot import types
import datetime
import time
import threading
bot=telebot.TeleBot("Your_bot_Token")
global j,i,data, mt, mdt
polz_id = None
from keyboard import keyboard1,keyboard2,keyboard3,keyboard4,keyboard5,keyboard6,keyboardback



#Starting the bot, the handler of "start" command
@bot.message_handler(commands=['start'])
def start(message):
    global i,polz_id
    i=0
    polz_id = message.chat.id
    conn = sqlite3.connect('YOUR_DB_NAME')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS TABLE_NAME (id TEXT NOT NULL , name TEXT NOT NULL, task TEXT NOT NULL, datatime TEXT NOT NULL)')
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!',)
    bot.send_message(message.chat.id, '–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –≤–∞–∂–Ω–æ–ºüòâ',reply_markup=keyboard1)

#A loop that checks if there are user notes in the database that need to be notified now(checking every 60 seconds)
def check_task():
    while True:
        global data,tt,dtt,j,polz_id
        if polz_id:
            j=0
            conn = sqlite3.connect('YOUR_DB_NAME')
            cursor = conn.cursor()
            cursor.execute('SELECT task, datatime FROM TABLE_NAME WHERE id = ?', [polz_id])
            data2 = cursor.fetchall()
            conn.close()
            while j < len(data2):
                tt, dtt = data2[j]
                min_difference = datetime.timedelta(minutes=1)
                checkt = datetime.datetime.strptime(dtt, '%d.%m.%Y %H:%M')
                current_time = datetime.datetime.now()
                if ((checkt - current_time) < min_difference):
                    bot.send_message(polz_id,f'–ù–∞–ø–æ–º–∏–Ω–∞—é, {tt}')
                    conn = sqlite3.connect('hubs.sql')
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM zp WHERE task = ? AND datatime = ?",(tt,dtt))
                    conn.commit()
                    conn.close()
                    j += 1
                elif  (checkt.date() == (current_time + datetime.timedelta(days=1)).date() and checkt.hour == current_time.hour and checkt.minute == current_time.minute):
                    bot.send_message(polz_id, f'–ù–∞–ø–æ–º–∏–Ω–∞—é, {tt} —É–∂–µ –∑–∞–≤—Ç—Ä–∞')
                    j += 1
                else:
                    j += 1
        time.sleep(60)
t = threading.Thread(target=check_task)
t.start()



#Button callback handler
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(callback):
    global i,data
    if callback.data == 'prev':
        i += 1
        if i < len(data):
            mt, mdt = data[i]
            bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.id,text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {mt}\n–î–µ–¥–ª–∞–π–Ω: {mdt}', reply_markup=keyboard2)
        else:
            bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.id,text='–∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç', reply_markup=keyboard3)
    elif callback.data == 'next':
        i -= 1
        if i >= 0:
            mt, mdt = data[i]
            bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.id,text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {mt}\n–î–µ–¥–ª–∞–π–Ω: {mdt}', reply_markup=keyboard2)
        else:
            bot.edit_message_text(chat_id=callback.message.chat.id,message_id=callback.message.id,text='–ó–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç', reply_markup=keyboard4)
    elif callback.data == 'chng':
        bot.send_message(callback.message.chat.id,f'–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–ø–∏—Å—å—é?', reply_markup=keyboard5)
        bot.register_next_step_handler(callback.message,rename)
    elif callback.data == 'yes':
        mt, mdt = data[i]
        conn = sqlite3.connect('YOUR_DB_NAME')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM zp WHERE TABLE_NAME = ? AND datatime = ?",(mt,mdt))
        conn.commit()
        conn.close()
        bot.send_message(callback.message.chat.id,'–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞üëå', reply_markup=keyboard1)
    elif callback.data == 'no':
        change_task(callback.message)
    elif callback.data == 'back':
        bot.send_message(callback.message.chat.id,'–ù–∞–∑–∞–¥', reply_markup=keyboard1)
        start2(callback.message)
#Create new notes and viewing existing now
@bot.message_handler(content_types=['text'])
def start2(message):
    if (message.text== '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å'):
        new_task(message)
    elif (message.text== '–ú–æ–∏ –∑–∞–ø–∏—Å–∏üìã'):
        conn = sqlite3.connect('hubs.sql')
        cur = conn.cursor()
        exists = cur.execute("SELECT 1 FROM TABLE_NAME WHERE id = ?", [message.from_user.id]).fetchone()
        if exists:
            change_task(message)
        else:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ü•∫', reply_markup=keyboard1)
    else: bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ',reply_markup=keyboard1)
#Create new notes
def new_task(message):
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É', reply_markup=keyboardback)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    bot.register_next_step_handler(message, name)
def name (message):
    if message.text == "–ù–∞–∑–∞–¥":
        start2(message)
    else:
        global task
        task = message.text.strip()
        bot.send_message(message.chat.id, '–í–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è(–î–î.–ú–ú.–ì–ì–ì–ì —á—á:–º–º.)')
        bot.register_next_step_handler(message, time_task)
def time_task(message):
    global date
    date = message.text.strip()
    try:
        time = datetime.datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        now = datetime.datetime.now()
        delta = time - now
        if (delta.total_seconds() <= 0):
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            bot.register_next_step_handler(message, time_task)
        else:
            conn = sqlite3.connect('YOUR_DB_NAME')
            cur = conn.cursor()
            cur.execute('INSERT INTO TABLE_NAME (id, name,task,datatime) VALUES("%s","%s","%s","%s")' % (message.from_user.id, message.from_user.first_name,task,date))
            conn.commit()
            cur.close()
            conn.close()
            bot.send_message(message.chat.id, '–í—Å—ë –∑–∞–ø–∏—Å–∞–Ω–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—éüôå', reply_markup=keyboard1)
    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        bot.register_next_step_handler(message, time_task)
#Viewing and editing existing notes
def change_task(message):
    global data
    i=0
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É', reply_markup=types.ReplyKeyboardRemove())
    conn = sqlite3.connect('YOUR_DB_NAME')
    cursor = conn.cursor()
    cursor.execute('SELECT "task", datatime FROM "NAME_TABLE_FROM_YOUR_DB" WHERE id = ?', [message.from_user.id])
    data = cursor.fetchall()
    conn.close()
    if i < len(data):
        mt, mdt = data[i]
        bot.send_message(message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ: {mt}\n–î–µ–¥–ª–∞–π–Ω: {mdt}',reply_markup=keyboard2)
#Choice: rename,change deadline or delete note
def rename(message):
    global i
    mt, mdt = data[i]
    if (message.text== '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ'):
        conn = sqlite3.connect('YOUR_DB_NAME')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM TABLE_NAME WHERE task = ? AND datatime = ?",(mt,mdt))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',reply_markup=keyboardback)
        bot.register_next_step_handler(message, change_name)
    elif (message.text== '–ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω'):
        conn = sqlite3.connect('YOUR_DB_NAME')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM TABLE_NAME WHERE task = ? AND datatime = ?",(mt,mdt))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–î–î.–ú–ú.–ì–ì–ì–ì —á—á:–º–º.)')
        bot.register_next_step_handler(message, change_deadline)
    elif(message.text=='–£–¥–∞–ª–∏—Ç—å'):
        bot.send_message(message.chat.id,f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å? \n –ù–∞–∑–≤–∞–Ω–∏–µ:{mt}\n–î–µ–¥–ª–∞–π–Ω: {mdt}',reply_markup=keyboard6)

    elif(message.text == '–ù–∞–∑–∞–¥'):
        change_task(message)
#Change notes name
def change_name(message):
    mt, mdt = data[i]
    if (message.text== '–ù–∞–∑–∞–¥'):
        bot.send_message(message.chat.id, '–ù–∞–∑–∞–¥',reply_markup=keyboard5)
        rename()
    else:
        nt = message.text.strip()
        conn = sqlite3.connect('YOR_DB_NAME')
        cur = conn.cursor()
        cur.execute('INSERT INTO TABLE_NAME (id, name,task,datatime) VALUES("%s","%s","%s","%s")' % (message.from_user.id, message.from_user.first_name,nt,mdt))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æüëå', reply_markup=keyboard1)
#Change notes deadline
def change_deadline(message):
    global newdl
    mt, mdt = data[i]
    newdl = message.text.strip()
    try:
        time = datetime.datetime.strptime(message.text, '%d.%m.%Y %H:%M')
        now = datetime.datetime.now()
        delta = time - now
        if (delta.total_seconds() <= 0):
            bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            bot.register_next_step_handler(message, change_deadline)
        elif (message.text== '–ù–∞–∑–∞–¥'):
            bot.send_message(message.chat.id, '–ù–∞–∑–∞–¥')
            rename()
        else:
            conn = sqlite3.connect('hubs.sql')
            cur = conn.cursor()
            cur.execute('INSERT INTO TABlE_NAME (id, name,task,datatime) VALUES("%s","%s","%s","%s")' % (message.from_user.id, message.from_user.first_name,mt,newdl))
            conn.commit()
            cur.close()
            conn.close()
            bot.send_message(message.chat.id,'–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æüëå', reply_markup=keyboard1)
    except ValueError:
        bot.edit_message_text(message.chat.id, '–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        bot.register_next_step_handler(message, change_deadline)
bot.infinity_polling()
